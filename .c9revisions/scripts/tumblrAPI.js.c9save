{"ts":1368641699269,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\njQuery plugin for embedding Tumblr via Tumblr API read-only implementation.\nFor more info on the Tumblr API, please visit http://www.tumblr.com/docs/en/api/v2\n2011 ian.ainley (@ gmail)\n*/\n\n;(function ($) {\n\n$.fn.embedTumblr = function (APIKey, options) {\n    return this.each(function(){\n        var target = $(this);\n\n        if (target.data(\"embedTumblr\")) return;\n\n        var tumblrPosts = new AccessTumlbrApi(target, APIKey, options);\n\n        target.data('embedTumblr', tumblrPosts)\n\n        tumblrPosts.init();\n    });\n};\n\n$.fn.embedTumblr.defaults = {\n    postsPerPage: 3,\n    pagination: true,\n    currentPage: 1,\n    loading: \"<p>Loading...</p>\",\n    previousBtn: \"&laquo; Prev\",\n    nextBtn: \"Next &raquo;\",\n    error: \"<h2>Error!</h2><p>There was an error accessing the Tumblr API, LAME!</p>\"\n};\n\nfunction AccessTumlbrApi(target, APIKey, options){\n    var s = this;\n\n    s.settings = $.extend({}, $.fn.embedTumblr.defaults, options);\n\n    /*** FORMAT TIMESTAMP ***/\n    var formatedPostDate = function (timestamp) {\n        var jsDate = new Date(timestamp * 1000),\n            month = jsDate.getMonth() + 1,\n            day = jsDate.getDay(),\n            hours = convertedHours(),\n            minutes = convertedMinutes(),\n            year = jsDate.getFullYear(),\n            postTime; // Used to store formatted time.\n\n        function convertedHours() {\n            var military = jsDate.getHours();\n\n            if (military > 12) {\n                var standard = military - 12,\n                    period = \"PM\";\n            } else {\n                var standard = military,\n                    period = \"AM\";\n            }\n            return {\n                hour: standard,\n                period: period\n            };\n        }\n\n        function convertedMinutes() {\n            var jsMin = jsDate.getMinutes();\n\n            if (jsMin < 10) {\n                var min = \"0\" + jsMin;\n            } else {\n                var min = jsMin;\n            }\n            return min;\n        }\n        postTime = month + \"\\/\" + day + \"&nbsp;\" + year + \"&nbsp;\" + hours.hour + \":\" + minutes + hours.period;\n        return postTime;\n    } /*** END TIMESTAMP ***/\n\n    /*** POSTS ***/\n    var formatPosts = function (blog, data) {\n        var frag = $(\"<div />\");\n       \n        $.each(data.response.posts, function () {\n            var postType = this.type,\n                thisPost = $(\"<div class='post'/>\"),\n                postDate = formatedPostDate(this.timestamp),\n                linkURL = this.post_url;\n\n            switch (postType) {\n\n            /*** AUDIO POST ***/\n            case \"audio\":\n                var audioTitle = 'AUDIO: ' + this.artist + ' - ' + this.track_name,\n                    imgSRC = this.album_art ? '<img src=\"' + this.album_art + '\"/>' : \" \";\n\n                thisPost.addClass('audio-post')\n                        .append(\n                            '<h2>' + audioTitle + '</h2>', \n                            '<p class=\"post-date\">' + postDate + '</p>', \n                            imgSRC, \n                            this.player, \n                            this.caption, \n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END AUDIO POST***/\n\n            /*** TEXT POST ***/\n            case \"text\":\n                thisPost.addClass('text-post')\n                        .append(\n                            '<h2>' + this.title + '</h2>', \n                            '<p class=\"post-date\">' + postDate + '</p>', \n                            this.body, \n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END TEXT POST***/            \n\n            /*** PHOTO POST ***/\n            case \"photo\":\n                var photos = this.photos,\n                    photoContainer = $('<div class=\"tumblr-photos\" />');\n\n                for (i = 0; i < photos.length; i++) {\n                    var figure = $('<figure />');\n                    // Check for photo size options. Prevents really large original images from being called.\n                    if (photos[i].alt_sizes[0].width >= 500) {\n                        var n = 0;\n                        for ( ; n < photos[i].alt_sizes.length; n++) {\n                            if (photos[i].alt_sizes[n].width === 500) {\n                                var photoSizeURL = photos[i].alt_sizes[n].url;\n                            }\n                        }\n                    } else {\n                        var photoSizeURL = photos[i].original_size.url;\n                    }\n                    if (photos.length > 1) {\n                        photoContainer.addClass(\"multi-photo\");\n                    }\n                    if (photos[i].caption != \"\") {\n                        var caption = $('<figcaption />');\n                        caption.append(photos[i].caption);\n                    } else {\n                        var caption = \"\";\n                    }\n                    figure.append('<a href=\"' + photos[i].original_size.url + '\" target=\"_blank\" title=\"' + photos[i].caption + '\"><img src=\"' + photoSizeURL + '\"/></a>', caption);\n                    photoContainer.append(figure);\n                }\n                thisPost.addClass('photo-post')\n                        .append(\n                            '<p class=\"post-date\">' + postDate + '</p>', \n                            photoContainer, \n                            this.caption, \n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END PHOTO POST***/\n            \n            /*** QUOTE POST ***/\n            case \"quote\":\n                thisPost.addClass('quote-post')\n                        .append(\n                            '<p class=\"post-date\">' + postDate + '</p>', \n                            '<q class=\"quote-text\">' + this.text + '</q>', \n                            '<p class=\"quote-author\"> &#8212; ' + this.source + '</p>', \n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END QUOTE POST***/\n\n            /*** VIDEO POST ***/\n            case \"video\":\n                thisPost.addClass('video-post')\n                        .append(\n                            '<p class=\"post-date\">' + postDate + '</p>', \n                            this.player[2].embed_code, \n                            this.caption, \n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END VIDEO POST ***/\n\n            /*** LINK POST ***/\n            case \"link\":\n                var description;\n                    \n                if (this.description){                    \n                    description = this.description;                \n                } else {\n                    description = \"\";\n                }\n\n                thisPost.addClass('link-post')\n                        .append(\n                            '<p class=\"post-date\">' + postDate + '</p>',\n                            '<a href=\"' + this.url + '\">' + this.title + '</a>',\n                            description,\n                            '<a href=\"' + linkURL + '\">Go to tumblr post...</a>'\n                        );\n                frag.append(thisPost);\n                break; /*** END LINK POST ***/\n\n            /*** CHAT POST ***/\n            case \"chat\":\n                thisPost.addClass('chat-post')\n                        .append('<p class=\"post-date\">' + postDate + '</p>');\n\n                for (i = 0; i < this.dialogue.length; i++){\n                    thisPost.append(\n                        '<span class=\"chat-post-name\">' + this.dialogue[i].name + '</span>',\n                        '<p class=\"chat-post-phrase\">' + this.dialogue[i].phrase + '</p>'\n                    );\n                }\n\n                thisPost.append('<a href=\"' + linkURL + '\">Go to tumblr post...</a>');\n\n                frag.append(thisPost);\n                break; /*** END CHAT POST ***/\n            }\n        });\n        \n        blog.append(frag);\n    } /*** END POSTS ***/\n\n    /***  PAGINATION ***/\n    var createPagination = function (target, APIKey, data, postsPerPage, currentPage) {\n        if (s.settings.pagination === true) {\n            var paginationContainer = $(\"<div class='blog-pagination clearfix'></div>\");\n\n               if (Math.ceil(data.response.total_posts / postsPerPage) !== currentPage) {\n                   var nextBtn = $(\"<div class='blog-btn next'>\" + s.settings.nextBtn + \"</div>\").css({\n                       \"cursor\": \"pointer\"\n                   });\n                   paginationContainer.append(nextBtn);\n               }\n               if (currentPage !== 1) {\n                   var prevBtn = $(\"<div class='blog-btn prev'>\" + s.settings.previousBtn + \"</div>\").css({\n                       \"cursor\": \"pointer\"\n                   });\n                   paginationContainer.append(prevBtn);\n               }\n\n            target.append(paginationContainer);\n            bindPagination(target, APIKey);\n        }  \n    }\n\n    var bindPagination = function (target, APIKey) {\n        $('.blog-btn').on('click.embedTumblr', function(){\n            if ($(this).hasClass('next')) {\n                s.settings.currentPage++;   \n            }\n            if ($(this).hasClass('prev')) {\n                s.settings.currentPage--;\n            }\n\n            target.data('embedTumblr').getPosts(target, APIKey);\n        });\n    }  /***  END PAGINATION ***/\n\n    s.getPosts = function (target, APIKey) {\n        var postsPerPage = s.settings.postsPerPage, currentPage = s.settings.currentPage;\n\n        $.ajax({\n                url: APIKey + \"&limit=\" + postsPerPage + \"&offset=\" + (currentPage - 1) * postsPerPage,\n                dataType: \"jsonp\",\n                jsonp: \"&jsonp\",\n                beforeSend: function () {\n                    target.html(s.settings.loading);    // While Loading...\n                },\n                success: function (data) {\n                    target.html(\"\");\n                    formatPosts(target, data);\n                    createPagination(target, APIKey, data, postsPerPage, currentPage);                       \n                },\n                error: function () {\n                    target.append(s.settings.error);\n                }\n        });              \n    }\n\n    s.init = function () {        \n        s.getPosts(target, APIKey);\n    }\n\n    s.destroy = function (clearContainer) {\n        if(clearContainer === true) {\n            target.html(\"\");\n        }\n\n        $('.blog-btn').off('.embedTumblr');\n\n        target.removeData('embedTumblr');\n    }\n}\n\n})(jQuery);\n\n"]],"start1":0,"start2":0,"length1":0,"length2":11043}]],"length":11043}
